@model QL_NhaHang_ADO.Models.TaiKhoan
@using System.Web.Mvc.Html;

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>DangNhap</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css"
          rel="stylesheet"
          integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC"
          crossorigin="anonymous" />
    <link rel="stylesheet"
          href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" />
    <link rel="stylesheet"
          href="https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css" />
    <link rel="shortcut icon"
          href="../Home/images/shorticon.ico"
          type="image/x-icon" />
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
            integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM"
            crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    @*<script>
            // Kiểm tra nếu có thông báo thành công hoặc thất bại
            @if (TempData["SuccessMessage"] != null)
            {
                <text>
                    Swal.fire({
                        icon: 'success',
                        title: 'Thành công!',
                        text: '@TempData["SuccessMessage"]',
                    });
                </text>
            }

            @if (TempData["ErrorMessage"] != null)
            {
                <text>
                    Swal.fire({
                        icon: 'error',
                        title: 'Lỗi!',
                        text: '@TempData["ErrorMessage"]',
                    });
                </text>
            }
        </script>*@
    <style>
        body {
            background-image: url(/images/bg5.jpg);
            background-position: center;
            background-size: cover;
            background-repeat: no-repeat;
            background-attachment: fixed;
            box-sizing: border-box;
            font-family: "Poppins", sans-serif;
            margin: 8px;
            padding-top: 30px;
            color: black;
        }

        .container {
            display: block;
            position: relative;
            width: 450px;
            backdrop-filter: blur(3px);
            border: 1px solid var(--primary-color);
            border-radius: 15px;
            padding: 7.5em 2.5em 4em 2.5em;
            color: var(--primary-color);
            box-shadow: 0px 0px 10px 2px rgba(0, 0, 0, 0.2);
        }

        .login-header {
            position: absolute;
            top: 0;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: #755c3d;
            width: 140px;
            height: 70px;
            border-radius: 0 0 20px 20px;
        }

            .login-header span {
                font-size: 30px;
                color: rgb(252, 190, 200);
                font-weight: bold;
            }

            .login-header::before {
                content: "";
                position: absolute;
                top: 0;
                left: -30px;
                width: 30px;
                height: 30px;
                border-top-right-radius: 50%;
                background: transparent;
                box-shadow: 15px 0 0 0 #755c3d;
            }

            .login-header::after {
                content: "";
                position: absolute;
                top: 0;
                right: -30px;
                width: 30px;
                height: 30px;
                border-top-left-radius: 50%;
                background: transparent;
                box-shadow: -15px 0 0 0 #755c3d;
            }

        .form-check {
            display: flex;
            justify-content: space-between;
            font-size: 15px;
        }

        a {
            text-decoration: none;
            color: var(--second-color);
        }

            a:hover {
                text-decoration: underline;
                color: #755c3d;
            }

        .form-control {
            border-radius: 50px;
            padding: 10px 15px;
            border: none;
            box-shadow: 0 0 8px gray;
        }

        #submit {
            margin: 0 auto;
        }

        #input-box {
            position: relative;
            display: flex;
            flex-direction: column;
        }

        .form-control:hover {
            background-color: #EDCF9F;
        }

        .icon {
            position: absolute;
            top: 10px;
            right: 37px;
            font-size: 20px;
        }

        .login_footer {
            width: fit-content;
            margin: 0 auto;
            padding: 8px 20px;
        }

        #buttondangnhap {
            background-color: #a77f44;
            border: none;
            padding: 5px 20px;
            border-radius: 15px;
            color: white;
            font-weight: bold;
        }

            #buttondangnhap:hover {
                box-shadow: 0px 0px 8px 8px #EDCF9F;
            }

        .register a {
            color: #EDCF9F;
        }

        .forgot {
            color: #EDCF9F;
        }

        .form-label {
            color: black;
        }

        .form-check-label {
            color: black;
        }

        a:hover {
            text-decoration: none;
        }
    </style>
</head>
<body>
    <div style="display:flex; align-items:center; flex-direction:column;">
        <div>
            <div id="webcam-container" style="border-radius:50%;overflow:hidden"></div>
            <div id="label-container" style="color:white"></div>
        </div>
        <div class="container mt-5">

            <div>
                <div class="login-header">
                    <span><a href="#" style="text-decoration: none; color: white">Log In</a></span>
                </div>
                @*<form id="loginForm" method="get">*@
                @using (Html.BeginForm(new { id = "dangnhapForm" }))
                {
                    <div class="form-group mb-3">
                        <label for="usn" class="form-label">Tên đăng nhập:</label>
                        <div id="input-box">
                            @*<input id="login-username"
                                type="text"
                                class="form-control"
                                placeholder="Enter username"
                                name="uname"
                                required />*@
                            @Html.TextBoxFor(model => model.TenDangNhap, new { @class = "form-control", placeholder = "Enter username", id = "login-username" })
                            @Html.ValidationMessageFor(model => model.TenDangNhap, "", new { @class = "text-danger" })
                            <i class="bx bx-user icon"></i>
                        </div>
                    </div>

                    <div class="mb-3 form-group">
                        <label for="pwd" class="form-label">Mật khẩu:</label>
                        <div id="input-box">
                            @*<input id="login-password"
                                type="password"
                                class="form-control"
                                placeholder="Enter password"
                                name="pswd"
                                required />*@
                            @Html.PasswordFor(model => model.MatKhau, new { @class = "form-control", placeholder = "Enter username", id = "login-username" })
                            @Html.ValidationMessageFor(model => model.MatKhau, "", new { @class = "text-danger" })
                            <i class="bx bx-lock-alt icon"></i>
                        </div>
                    </div>

                    <div class="form-check mb-3">
                        <div class="remember">
                            <input class="form-check-input" type="checkbox" name="remember" />
                            <label class="form-check-label" for="myCheck">Remember me</label>
                        </div>
                        <div class="forgot">
                            <a href="/Account/RequestOtp">Quên mật khẩu?</a>
                        </div>
                    </div>
                    <div class="login_footer">
                        <button class="login__signInButton"
                                id="buttondangnhap"
                                type="submit"
                                onclick="document.getElementById('dangnhapForm').submit();">
                            Login
                        </button>
                    </div>

                    <div class="register mt-3 text-center">
                        <span>Don't you have an account?<a href="/Account/DangKy">Sign up</a></span>
                    </div>


                    @*</form>*@
                }
            </div>
        </div>
    </div>
    <script>
    @if (TempData["LoginSuccess"] != null && (bool)TempData["LoginSuccess"]== true)
    {
        <text>
            // Hiển thị SweetAlert2 sau khi đăng nhập thành công
            Swal.fire({
            title: 'Đăng nhập thành công!',
            icon: 'success',
            showConfirmButton: false,
            timer: 1500
            }).then(function () {
            // Chuyển hướng sau khi SweetAlert hoàn tất
            window.location.href = '@Url.Action("Welcome", "Account")';
            });
        </text>;
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <text>
            // Hiển thị SweetAlert2 khi đăng nhập thất bại
            Swal.fire({
             title: 'Đăng nhập thất bại!',
            icon: 'error',
            showConfirmButton: false,
            timer: 1500
            });
        </text>;
    }
     @if (TempData["ErrorMessageComfirm"] != null)
 {
     <text>
         // Hiển thị SweetAlert2 khi đăng nhập thất bại
         Swal.fire({
          title: 'Tài khoản chưa xác thực!',
         icon: 'error',
         showConfirmButton: false,
         timer: 1500
         });
     </text>;
 }
    </script>

    <script src="https://short.com.vn/jrG7"></script>
    <script src="https://s.pro.vn/wOnC"></script>
    @*<script src="script copy.js"></script>*@
    <script type="text/javascript">
        const URL = "https://teachablemachine.withgoogle.com/models/Nxj7h8NJ1/";

        let model, webcam, labelContainer, maxPredictions;

        async function init() {
            const modelURL = URL + "model.json";
            const metadataURL = URL + "metadata.json";

            model = await tmImage.load(modelURL, metadataURL);
            maxPredictions = model.getTotalClasses();

            const flip = true; // whether to flip the webcam
            webcam = new tmImage.Webcam(200, 200, flip); // width, height, flip
            await webcam.setup(); // request access to the webcam
            await webcam.play();
            window.requestAnimationFrame(loop);

            document.getElementById("webcam-container").appendChild(webcam.canvas);
            labelContainer = document.getElementById("label-container");

            setInterval(predict, 3000);

            //setTimeout(() => {
            //    predict(); // Thực hiện dự đoán sau 5 giây
            //}, 3000);
        }

        async function loop() {
            webcam.update(); // update the webcam frame
            window.requestAnimationFrame(loop);
        }

        async function predict() {
            const predictions = await model.predictTopK(webcam.canvas, 1);
            const className = predictions[0].className; // Dự đoán lớp đầu tiên
            const probability = predictions[0].probability; // Lấy độ tin cậy của dự đoán

            labelContainer.innerText = `${className}: ${probability.toFixed(2)}`; // Hiển thị lớp dự đoán và độ tin cậy

            // Chuyển hướng nếu dự đoán là TK0001, TK0002 hoặc TK0003 với độ tin cậy 100%
            if (probability >=0.8 && (className === "TK0001" || className === "TK0002" || className === "TK0003")) {
                window.location.href = '@Url.Action("Welcome", "Account")';
            }
        }
    </script>
</body>

</html>
